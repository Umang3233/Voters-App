generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Voter {
  id                          String              @id @default(auto()) @map("_id") @db.ObjectId
  VoterId                     String?
  name                        String
  email                       String              @unique
  hashedPassword              String?
  isCandidate                 Boolean?            @default(false)
  VoteParticipationCount      Int?                @default(0)
  CandidateParticipationCount Int?                @default(0)
  candidates                  VoteCandidate[]
  winnings                    VoteWinner[]
  slogans                     Slogan[]
  departments                 VoterDepartment[]
  createdOrganizations        Organization[]
  voteResults                 VoteResult[]
  organizations               VoterOrganization[] 
}

model Organization {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  creator     Voter               @relation(fields: [creatorId], references: [id])
  creatorId   String              @db.ObjectId
  votes       Vote[]
  departments Department[]
  voters      VoterOrganization[] 
}

model Vote {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  createdAt      DateTime        @default(now())
  startTime      DateTime
  endTime        DateTime
  extendedTime   DateTime?
  description    String
  isAnonymous    Boolean         @default(false)
  voteType       VoteType        @default(MULTIPLE_CHOICE)
  candidates     VoteCandidate[]
  winners        VoteWinner[]
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String          @db.ObjectId
  department     Department?     @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId   String?         @db.ObjectId
  results        VoteResult[]
  slogans        Slogan[]
  isActive       Boolean         @default(true)
}

enum VoteType {
  YES_NO
  MULTIPLE_CHOICE
  RANKED_CHOICE
}

model VoteCandidate {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  voterId String @db.ObjectId
  voter   Voter  @relation(fields: [voterId], references: [id])
  voteId  String @db.ObjectId
  vote    Vote   @relation(fields: [voteId], references: [id])
}

model VoteWinner {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  voterId String @db.ObjectId
  voter   Voter  @relation(fields: [voterId], references: [id])
  voteId  String @db.ObjectId
  vote    Vote   @relation(fields: [voteId], references: [id])
}

model VoteResult {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  voteId      String   @db.ObjectId
  vote        Vote     @relation(fields: [voteId], references: [id])
  candidateId String   @db.ObjectId
  candidate   Voter    @relation(fields: [candidateId], references: [id])
  voteCount   Int      @default(0)
  isWinner    Boolean  @default(false)
  statistics  Json?
}

model Slogan {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  voteId  String @db.ObjectId
  vote    Vote   @relation(fields: [voteId], references: [id])
  voterId String @db.ObjectId
  voter   Voter  @relation(fields: [voterId], references: [id])
}

model Department {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  parentId       String?           @db.ObjectId
  parent         Department?       @relation("DepartmentHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children       Department[]      @relation("DepartmentHierarchy")
  voters         VoterDepartment[]
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String            @db.ObjectId
  votes          Vote[]
}

model VoterDepartment {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  voter        Voter      @relation(fields: [voterId], references: [id], onDelete: Restrict)
  voterId      String     @db.ObjectId
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Restrict)
  departmentId String     @db.ObjectId

  @@unique([voterId, departmentId])
}

model VoterOrganization {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  voter          Voter        @relation(fields: [voterId], references: [id], onDelete: Restrict)
  voterId        String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId String       @db.ObjectId
}
